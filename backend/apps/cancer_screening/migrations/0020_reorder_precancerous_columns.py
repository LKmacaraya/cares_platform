# Generated by Cascade to reorder columns for PreCancerousMedsRequest
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("cancer_screening", "0019_alter_precancerousmedsrequest_patient"),
        ("patient", "0005_patient_registered_by"),
    ]

    operations = [
        migrations.RunSQL(
            sql=r"""
            -- Create a new table with the desired column order
            CREATE TABLE IF NOT EXISTS cancer_screening_precancerousmedsrequest_new (
                id BIGSERIAL PRIMARY KEY,
                patient_id VARCHAR(20) NOT NULL,
                lgu_name VARCHAR(255) NOT NULL,
                date DATE NOT NULL,
                contact_number VARCHAR(50) NOT NULL,
                prepared_by VARCHAR(255) NOT NULL,
                approved_by VARCHAR(255) NOT NULL,
                last_name VARCHAR(100) NOT NULL,
                first_name VARCHAR(100) NOT NULL,
                middle_initial VARCHAR(2) NOT NULL,
                date_of_birth DATE NOT NULL,
                interpretation_of_result VARCHAR(50) NOT NULL,
                status VARCHAR(20) NOT NULL,
                created_at TIMESTAMPTZ NOT NULL
            );

            -- Add the FK to patient.patient_id
            ALTER TABLE cancer_screening_precancerousmedsrequest_new
            ADD CONSTRAINT precancerous_new_patient_fk
            FOREIGN KEY (patient_id)
            REFERENCES patient_patient (patient_id)
            ON DELETE CASCADE;

            -- Create an index on patient_id (Django would normally add one for FK)
            CREATE INDEX IF NOT EXISTS precancerous_new_patient_id_idx
                ON cancer_screening_precancerousmedsrequest_new (patient_id);

            -- Copy data from the old table if it exists
            INSERT INTO cancer_screening_precancerousmedsrequest_new (
                id, patient_id, lgu_name, date, contact_number, prepared_by, approved_by,
                last_name, first_name, middle_initial, date_of_birth, interpretation_of_result, status, created_at
            )
            SELECT 
                id, patient_id, lgu_name, date, contact_number, prepared_by, approved_by,
                last_name, first_name, middle_initial, date_of_birth, interpretation_of_result, status, created_at
            FROM cancer_screening_precancerousmedsrequest;

            -- Drop old table
            DROP TABLE cancer_screening_precancerousmedsrequest;

            -- Rename new table to original name
            ALTER TABLE cancer_screening_precancerousmedsrequest_new
            RENAME TO cancer_screening_precancerousmedsrequest;

            -- Ensure the id sequence is set correctly for future inserts
            SELECT setval(
                pg_get_serial_sequence('cancer_screening_precancerousmedsrequest', 'id'),
                COALESCE((SELECT MAX(id) FROM cancer_screening_precancerousmedsrequest), 1),
                true
            );
            """,
            reverse_sql=r"""
            -- Reverse: create a table with the previous column order and copy back
            CREATE TABLE IF NOT EXISTS cancer_screening_precancerousmedsrequest_old (
                id BIGSERIAL PRIMARY KEY,
                lgu_name VARCHAR(255) NOT NULL,
                date DATE NOT NULL,
                contact_number VARCHAR(50) NOT NULL,
                prepared_by VARCHAR(255) NOT NULL,
                approved_by VARCHAR(255) NOT NULL,
                last_name VARCHAR(100) NOT NULL,
                first_name VARCHAR(100) NOT NULL,
                middle_initial VARCHAR(2) NOT NULL,
                date_of_birth DATE NOT NULL,
                interpretation_of_result VARCHAR(50) NOT NULL,
                status VARCHAR(20) NOT NULL,
                created_at TIMESTAMPTZ NOT NULL,
                patient_id VARCHAR(20) NOT NULL
            );

            ALTER TABLE cancer_screening_precancerousmedsrequest_old
            ADD CONSTRAINT precancerous_old_patient_fk
            FOREIGN KEY (patient_id)
            REFERENCES patient_patient (patient_id)
            ON DELETE CASCADE;

            CREATE INDEX IF NOT EXISTS precancerous_old_patient_id_idx
                ON cancer_screening_precancerousmedsrequest_old (patient_id);

            INSERT INTO cancer_screening_precancerousmedsrequest_old (
                id, lgu_name, date, contact_number, prepared_by, approved_by,
                last_name, first_name, middle_initial, date_of_birth, interpretation_of_result, status, created_at, patient_id
            )
            SELECT 
                id, lgu_name, date, contact_number, prepared_by, approved_by,
                last_name, first_name, middle_initial, date_of_birth, interpretation_of_result, status, created_at, patient_id
            FROM cancer_screening_precancerousmedsrequest;

            DROP TABLE cancer_screening_precancerousmedsrequest;

            ALTER TABLE cancer_screening_precancerousmedsrequest_old
            RENAME TO cancer_screening_precancerousmedsrequest;

            SELECT setval(
                pg_get_serial_sequence('cancer_screening_precancerousmedsrequest', 'id'),
                COALESCE((SELECT MAX(id) FROM cancer_screening_precancerousmedsrequest), 1),
                true
            );
            """,
        )
    ]
